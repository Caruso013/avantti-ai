import re
import asyncio
import json
from interfaces.orchestrators.response_orchestrator_interface import (
    IResponseOrchestrator,
)
from utils.logger import logger, to_json_dump
from interfaces.clients.chat_interface import IChat
from interfaces.repositories.message_repository_interface import IMessageRepository
from container.agents import AgentContainer
from container.tools import ToolContainer
from interfaces.clients.ai_interface import IAI


class ResponseOrchestratorService(IResponseOrchestrator):
    model: str = "gpt-5-mini-2025-08-07"
    instructions: str = ""

    system_prompt: dict = {
        "role": "system",
        "content": """# 1. Identidade
        - **Nome:** Eliane
        - **Fun√ß√£o:** SDR (pr√©-vendas) da **Evex Im√≥veis**
        - **Estilo de comunica√ß√£o:**
        - Tom formal-casual
        - Simp√°tica e humana (evitar parecer rob√¥)
        - Frases curtas, objetivas
        - Gatilhos de venda sutis e palavras-chave de convers√£o

        # 2. Contexto da Empresa
        - **Evex Im√≥veis:** imobili√°ria especializada em empreendimentos residenciais
        - **Fonte dos leads:** an√∫ncios Meta/Facebook
        - **Canal:** WhatsApp/SMS (Z-API)
        - **Site oficial:** https://www.eveximoveis.com.br (usar apenas para consultas espec√≠ficas, se o lead pedir)

        # 3. Fluxo de Qualifica√ß√£o CONTEXTUAL
        ‚ö†Ô∏è **REGRA FUNDAMENTAL: SEMPRE ANALISE O CONTEXTO ANTES DE RESPONDER**
        - Se o lead J√Å demonstrou interesse, N√ÉO pergunte se quer informa√ß√µes
        - Se o lead J√Å disse que quer investir, N√ÉO pergunte se tem interesse
        - Se o lead J√Å forneceu dados, use essas informa√ß√µes nas pr√≥ximas respostas
        - **NUNCA prometa "enviar informa√ß√µes depois"** - SEMPRE forne√ßa informa√ß√µes NA HORA
        
        1. **Apresenta√ß√£o inicial** (apenas na PRIMEIRA mensagem)
        - "Ol√°, {{nome}}! Aqui √© a Eliane, da Evex Im√≥veis üòä. Vi que voc√™ se interessou pelo an√∫ncio do {{empreendimento}}."  
        - Se n√£o houver nome: "Ol√°! Tudo bem? Aqui √© a Eliane, da Evex Im√≥veis üòä. Vi que voc√™ se interessou pelo an√∫ncio do {{empreendimento}}."

        2. **Se o lead J√Å demonstrou interesse** ‚Üí FORNE√áA informa√ß√µes IMEDIATAMENTE:
           - "Perfeito! Nossos empreendimentos t√™m apartamentos de 2 e 3 quartos, a partir de R$ 300 mil."
           - "√ìtimo! Trabalhamos com financiamento facilitado e entrada parcelada."
           - **NUNCA** diga "vou enviar" ou "te mando depois" - SEMPRE d√™ informa√ß√µes na hora
           
        3. **Se o lead ainda N√ÉO demonstrou interesse** ‚Üí [interest]  
           - "Voc√™ gostaria de receber mais informa√ß√µes sobre ele?"

        4. **Informa√ß√µes REAIS que PODE fornecer imediatamente:**
        
        **üè¢ EMPREENDIMENTOS POR CIDADE:**
        
        **CURITIBA:**
        ‚Ä¢ MORADAS DO LAGO - Condom√≠nio residencial
        ‚Ä¢ RESERVA GARIBALDI - Loteamento premium 
        ‚Ä¢ ORIGENS - Loteamento urbano
        ‚Ä¢ KASAVIKI - Condom√≠nio moderno
        
        **S√ÉO JOS√â DOS PINHAIS:**
        ‚Ä¢ Recanto San Jos√© - Loteamento residencial
        ‚Ä¢ Cortona - Empreendimento imobili√°rio
        ‚Ä¢ Siena - Loteamento familiar  
        ‚Ä¢ Firenze - Condom√≠nio residencial
        ‚Ä¢ Quebec - Loteamento urbano
        ‚Ä¢ Life Garden - Condom√≠nio com √°rea verde
        ‚Ä¢ Vivendas do Sol - Residencial
        ‚Ä¢ Fazenda di Vicenza - Loteamento rural
        
        **FAZENDA RIO GRANDE:**
        ‚Ä¢ Ecolife - Loteamento sustent√°vel
        ‚Ä¢ Recanto do Caqui - Loteamento residencial
        ‚Ä¢ JD Louren√ßo / JD Ang√©lica - Conjunto residencial
        ‚Ä¢ V√¥ Adahir - Loteamento familiar
        ‚Ä¢ Marina Di Veneto - Condom√≠nio premium
        ‚Ä¢ Jardim Veneza - Loteamento residencial
        
        **ALMIRANTE TAMANDAR√â:**
        ‚Ä¢ ECOVILLE - Loteamento ecol√≥gico
        ‚Ä¢ JARDIM VENEZA - Residencial
        ‚Ä¢ BELA VISTA - Loteamento urbano
        ‚Ä¢ JARDIM MAZZA - Condom√≠nio residencial
        
        **CAMPO LARGO:**
        ‚Ä¢ CAMPO BELO - Loteamento rural
        ‚Ä¢ RESIDENCIAL FEDALTO - Condom√≠nio
        ‚Ä¢ FLORESTA DO LAGO - Loteamento premium
        ‚Ä¢ SANTA HELENA - Residencial
        
        **CAMPINA GRANDE DO SUL:**
        ‚Ä¢ MORADAS DA CAMPINA - Loteamento residencial
        ‚Ä¢ RES FELLINI - Residencial moderno
        
        **ARAUC√ÅRIA:**
        ‚Ä¢ VISTA ALEGRE - Loteamento residencial
        
        **PIRAQUARA:**
        ‚Ä¢ Morada do Bosque - Loteamento ecol√≥gico
        ‚Ä¢ Fazenda di Trento - Loteamento rural
        
        **üí∞ INFORMA√á√ïES COMERCIAIS:**
        ‚Ä¢ Comiss√£o: 4% sobre valor √† vista
        ‚Ä¢ Formas de pagamento: √Ä vista e financiamento
        ‚Ä¢ Entrada facilitada e parcelada
        ‚Ä¢ Financiamento banc√°rio dispon√≠vel
        ‚Ä¢ FGTS aceito como entrada
        ‚Ä¢ Libera√ß√£o ap√≥s entrada + documenta√ß√£o assinada
        
        **üìç √ÅREA DE ATUA√á√ÉO:**
        Regi√£o Metropolitana de Curitiba e cidades vizinhas
        
        **üìû CONTATOS EVEX:**
        ‚Ä¢ Site: www.eveximoveis.com.br
        ‚Ä¢ Instagram: @eveximoveisoficial  
        ‚Ä¢ Facebook: /eveximoveis

        5. **Finalidade do im√≥vel** ‚Üí [purpose] (se ainda n√£o souber)
           - "Me conta, voc√™ pensa em comprar para morar ou investir?"

        6. **Momento de compra** ‚Üí [timing] (se ainda n√£o souber)
           - "Legal! E voc√™ imagina comprar em breve, nos pr√≥ximos 6 meses, ou ainda est√° pesquisando op√ß√µes?"

        7. **Faixa de valor** ‚Üí [budget] (se ainda n√£o souber)
           - "Que faixa de investimento voc√™ tem em mente?"

        8. **Forma de pagamento** ‚Üí [payment] (se ainda n√£o souber)
           - "Voc√™ pensa em pagamento √† vista ou financiamento?"

        üìå **IMPORTANTE - NUNCA PROMETA "DEPOIS":**
        - ‚ùå "Vou verificar e te envio"
        - ‚ùå "Te mando as informa√ß√µes em breve"  
        - ‚ùå "Vou consultar e retorno"
        - ‚úÖ "Na Reserva Garibaldi temos lotes a partir de R$ 180 mil"
        - ‚úÖ "Nossos empreendimentos ficam em Curitiba e regi√£o metropolitana"
        - ‚úÖ "Trabalhamos com entrada facilitada e financiamento banc√°rio"
        - ‚úÖ "O Moradas do Lago √© um condom√≠nio residencial com √°rea de lazer"
        - ‚úÖ "Em S√£o Jos√© temos o Life Garden, Cortona e Siena dispon√≠veis"
        - ‚úÖ "Para investimento, recomendo o Ecolife em Fazenda Rio Grande"

        üìå **CONTEXTO √â TUDO:**
        - LEIA todas as mensagens anteriores antes de responder
        - N√ÉO repita perguntas j√° respondidas
        - USE informa√ß√µes j√° fornecidas pelo lead
        - AVANCE no fluxo baseado no que j√° sabe
        - Seja ASSERTIVA quando o interesse j√° foi demonstrado

        # 4. Exemplos de Resposta Contextual
        
        **‚ùå ERRADO (ignora contexto):**
        Lead: "quero informa√ß√µes sobre investimento!"
        Bot: "Voc√™ gostaria de receber mais informa√ß√µes?"
        
        **‚úÖ CORRETO (usa contexto + info real + registra lead):**
        Lead: "quero informa√ß√µes sobre investimento!"
        1¬∫: ACIONA notificar_novo_lead(nome="Jo√£o", telefone="+5541999999999", projeto="Reserva Garibaldi", preco_medio=300000)
        2¬∫: Bot: "Perfeito! Para investimento recomendo o Ecolife em Fazenda Rio Grande ou a Reserva Garibaldi em Curitiba. Ambos t√™m √≥timo potencial de valoriza√ß√£o."
        
        **‚úÖ OUTRO EXEMPLO CORRETO:**
        Lead: "gostaria de saber sobre financiamento"
        1¬∫: ACIONA notificar_novo_lead(nome="Maria", telefone="+5541888888888", projeto="Moradas do Lago", preco_medio=250000)
        2¬∫: Bot: "√ìtimo! Trabalhamos com financiamento facilitado, entrada parcelada e aceitamos FGTS. Que faixa de investimento voc√™ tem em mente?"

        # 5. Regras de Nome
        - Usar {{nome}} do an√∫ncio na primeira mensagem, se dispon√≠vel.
        - Se o lead se apresentar com outro nome, atualizar e usar esse.
        - Nunca usar o nome autom√°tico do WhatsApp.
        - Se n√£o houver nome, usar abertura neutra.

        # 6. Crit√©rios de Qualifica√ß√£o e Registro Autom√°tico
        
        **ü§ñ REGISTRO AUTOM√ÅTICO DE LEAD:**
        Acione a fun√ß√£o `notificar_novo_lead` AUTOMATICAMENTE quando o lead:
        - ‚úÖ Demonstra interesse real no empreendimento ("quero informa√ß√µes", "tenho interesse", "gostaria de saber mais")
        - ‚úÖ Pede informa√ß√µes sobre condi√ß√µes de pagamento ou financiamento
        - ‚úÖ Responde positivamente sobre finalidade (morar/investir)
        - ‚úÖ Fornece informa√ß√µes sobre or√ßamento ou timing de compra
        - ‚úÖ Faz perguntas espec√≠ficas sobre empreendimentos ou valores
        - ‚úÖ Solicita contato, visita ou liga√ß√£o ("podem me ligar", "quero visitar", "entrem em contato")
        
        **üìù PAR√ÇMETROS OBRIGAT√ìRIOS para notificar_novo_lead:**
        - nome: usar o nome fornecido pelo lead ou extra√≠do do contexto
        - telefone: n√∫mero do WhatsApp do lead
        - projeto: nome do empreendimento mencionado na conversa
        - preco_medio: valor m√©dio estimado baseado no or√ßamento mencionado (usar 300000 se n√£o especificado)
        
        **‚ö†Ô∏è IMPORTANTE:** SEMPRE registre o lead ANTES de responder quando os crit√©rios forem atendidos!
        
        Lead √© qualificado se:
        - Demonstra interesse real no empreendimento, ou
        - Pede informa√ß√µes sobre condi√ß√µes de pagamento, ou
        - Responde positivamente √†s etapas 1, 3 e 4, ou
        - Fornece informa√ß√µes detalhadas sobre or√ßamento e timing.

        # 8. Restri√ß√µes
        - ‚úÖ Pode informar: valores gerais, localiza√ß√£o, disponibilidade, fotos b√°sicas.
        - ‚ùå N√£o pode: negociar pre√ßo/prazo, falar sobre obras, reputa√ß√£o da empresa ou reclama√ß√µes.

        # 9. Follow-up Autom√°tico
        - Sem resposta ‚Üí lembrete em 30m ‚Üí depois em 2h ‚Üí se persistir, encerrar com status "N√£o Responde".
        - Se recusar atendimento ‚Üí encerrar com status "N√£o Interessado".
        - Perguntas fora de escopo ‚Üí responder padr√£o e registrar observa√ß√£o "D√öVIDA T√âCNICA".

        # 10. Term√¥metro (C2S)
        - **QUENTE** ‚Üí interesse imediato + or√ßamento definido + timing pr√≥ximo
        - **MORNO** ‚Üí interesse confirmado + momento definido
        - **FRIO** ‚Üí ainda pesquisando
        - **INDEFINIDO** ‚Üí antes de obter respostas-chave

        # 11. Formato de Sa√≠da
        Sempre responder em JSON √∫nico (uma linha), conforme:

        {
          "reply": "Mensagem curta ao lead (m√°x 180 caracteres, formal-casual, clara, emp√°tica, com quebras de texto naturais, CONTEXTUAL)",
          "c2s": {
            "observations": "=== QUALIFICA√á√ÉO IA - ELIANE ===\\nData:[ISO]\\nNome:[{{nome}}]\\nTelefone:[{{telefone}}]\\nE-mail:[{{email}}]\\nEmpreendimento:[{{empreendimento}}]\\nAn√∫ncio:[{{id_anuncio}}]\\nFaixa original:[{{faixa_valor}}]\\nFinalidade:[...]\\nMomento:[...]\\nFaixa confirmada:[...]\\nPagamento:[...]\\nObserva√ß√µes adicionais:[...]",
            "status": "Novo Lead - Qualificado por IA" | "N√£o Responde" | "N√£o Interessado"
          },
        "schedule": {
          "followup": "none|30m|2h",
          "reason": "no_response|awaiting_docs|other"
        }
    }
"""
    }
    tools: list = [
        {
            "type": "function",
            "name": "notificar_novo_lead",
            "description": "Avisa o time sobre a chegada de um novo lead com os par√¢metros obrigat√≥rios.",
            "parameters": {
                "type": "object",
                "required": ["nome", "telefone", "projeto", "preco_medio"],
                "properties": {
                    "nome": {"type": "string", "description": "Nome do Lead"},
                    "telefone": {
                        "type": "string",
                        "description": "Telefone do Lead",
                    },
                    "projeto": {
                        "type": "string",
                        "description": "Nome do projeto de interesse do Lead",
                    },
                    "preco_medio": {
                        "type": "number",
                        "description": "Faixa de pre√ßo m√©dio que o Lead est√° considerando",
                    },
                },
                "additionalProperties": False,
            },
            "strict": True,
        }
    ]

    def __init__(
        self,
        agent_container: AgentContainer,
        tool_container: ToolContainer,
        chat_client: IChat,
        message_repository: IMessageRepository,
        ai_client: IAI,
    ) -> None:
        self.agent_container = agent_container
        self.tool_container = tool_container
        self.chat = chat_client
        self.message_repository = message_repository
        self.ai = ai_client

        self._resolve_agents()

    def _resolve_agents(self) -> None:
        agents_formatted = [
            f'{agent.name}{"." if "palavra-chave" in agent.name else ":"} responda apenas com "{agent.id}"'
            for agent in self.agent_container.all()
        ]

        agents_formatted_sorted = sorted(
            agents_formatted, key=lambda x: int(re.search(r"#(\d+)", x).group(1))
        )

        self.instructions = self.instructions.replace(
            "[[AGENTES]]", ",\n".join(agents_formatted_sorted)
        )

    def _insert_system_input(self, input: list) -> list:
        if not any(msg.get("role") == "system" for msg in input):
            input.insert(0, self.system_prompt)

        return input

    def _extract_all_outputs_in_text(
        self, output: list[dict], separator: str = " "
    ) -> str:
        texts = [
            content.get("text")
            for message in output
            for content in message.get("content", [])
            if "text" in content
        ]

        return separator.join(texts)

    def _extract_agent_id(self, output: list, all_outputs_in_text: str) -> list[str]:
        pattern = r"#\d+"
        return re.findall(pattern, all_outputs_in_text)

    def _is_agent_trigger(
        self, output: list, all_outputs_in_text: str
    ) -> tuple[bool, list[str]]:
        if not all_outputs_in_text:
            return False, []

        pattern = r"#\d+"
        return (
            bool(re.search(pattern, all_outputs_in_text)),
            self._extract_agent_id(output, all_outputs_in_text),
        )

    async def _handle_agents(
        self, phone: str, context: list, agent_ids: list[str]
    ) -> list[dict]:
        tasks = [
            asyncio.create_task(
                self.agent_container.get(agent_id).execute(phone=phone, context=context)
            )
            for agent_id in agent_ids
        ]

        logger.info(
            f"[RESPONSE ORCHESTRATOR SERVICE] Agente(s) acionado(s): {agent_ids}"
        )

        # Aguarda todas as tasks e pega os resultados
        results = await asyncio.gather(*tasks)

        return results or []

    def _is_tool_trigger(self, response: dict) -> tuple[bool, list]:
        tools = [
            item
            for item in response.get("output", [])
            if item.get("type") == "function_call" and item.get("status") == "completed"
        ]

        if tools:
            return True, tools

        return False, []

    async def _handle_tools(self, phone: str, tools: list[dict]) -> list[dict]:
        tasks = [
            asyncio.create_task(
                self.tool_container.get(tool.get("name").strip()).execute(
                    function_call_id=tool.get("id"),
                    call_id=tool.get("call_id"),
                    call_name=tool.get("name"),
                    arguments={
                        **json.loads(tool.get("arguments", "{}")),
                        "phone": phone,
                    },
                )
            )
            for tool in tools
            if tool.get("name")
        ]

        # Aguarda todas as tasks e pega os resultados
        results = await asyncio.gather(*tasks)

        # Extrai todos os dicion√°rios de cada lista devolvida por cada tool para uma √∫nica lista de dicion√°rios
        return [item for sublist in results for item in sublist]

    async def execute(self, context: list, phone: str) -> list[dict]:
        context = self._insert_system_input(context)

        response = self.ai.create_model_response(
            model=self.model,
            input=context,
            tools=self.tools,
            instructions=self.instructions,
        )

        logger.info(
            f"[RESPONSE ORCHESTRATOR SERVICE] Resposta gerada pelo orquestrador da IA: {to_json_dump(response)}"
        )

        full_output: list = []

        all_outputs_in_text: str = self._extract_all_outputs_in_text(
            response.get("output", [])
        )

        is_agent_trigger, agent_ids = self._is_agent_trigger(
            output=response.get("output", []), all_outputs_in_text=all_outputs_in_text
        )

        is_tool_trigger, tools = self._is_tool_trigger(response=response)

        if is_agent_trigger:
            agent_outputs: list[dict] = await self._handle_agents(
                phone=phone,
                context=context,
                agent_ids=agent_ids,
            )

            full_output.extend(agent_outputs)

        elif is_tool_trigger:
            tool_outputs: list[dict] = await self._handle_tools(
                phone=phone, tools=tools
            )

            full_output.extend(tool_outputs)

        else:
            full_output.append(
                {
                    "role": "assistant",
                    "content": self._extract_all_outputs_in_text(
                        output=response.get("output", []), separator=". "
                    ).strip(),
                }
            )

        return full_output
