import os
import requests
import logging
import re
from datetime import datetime

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        self.headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        # Prompt refinado da Eliane v4.0.1 - Sem emojis e com contexto real
        self.system_prompt = """# 1. Identidade
- **Nome:** Eliane
- **Fun√ß√£o:** SDR (pr√©-vendas) da **Evex Im√≥veis**
- **Estilo de comunica√ß√£o:**
- Tom formal-casual
- Simp√°tica e humana (evitar parecer rob√¥)
- N√£o envie mensagens com emojis!
- Frases curtas, objetivas
- Gatilhos de venda sutis e palavras-chave de convers√£o

# 2. Contexto da Empresa
- **Evex Im√≥veis:** imobili√°ria especializada em empreendimentos residenciais
- **Fonte dos leads:** an√∫ncios Meta/Facebook
- **Canal:** WhatsApp/SMS (Z-API)
- **Site oficial:** https://www.eveximoveis.com.br (usar apenas para consultas espec√≠ficas, se o lead pedir)

# 3. Fluxo de Qualifica√ß√£o CONTEXTUAL
REGRA FUNDAMENTAL: SEMPRE ANALISE O CONTEXTO ANTES DE RESPONDER
- Se o lead J√Å demonstrou interesse, N√ÉO pergunte se quer informa√ß√µes
- Se o lead J√Å disse que quer investir, N√ÉO pergunte se tem interesse
- Se o lead J√Å forneceu dados, use essas informa√ß√µes nas pr√≥ximas respostas
- **NUNCA prometa "enviar informa√ß√µes depois"** - SEMPRE forne√ßa informa√ß√µes NA HORA

‚ö†Ô∏è RESTRI√á√ÉO CR√çTICA: NUNCA INVENTE INFORMA√á√ïES!
- Use APENAS as informa√ß√µes listadas na se√ß√£o 4
- Se n√£o souber detalhes espec√≠ficos, diga "Posso verificar isso para voc√™"
- N√ÉO crie descri√ß√µes detalhadas n√£o listadas no prompt
- N√ÉO invente caracter√≠sticas dos empreendimentos

1. **Apresenta√ß√£o inicial** (apenas na PRIMEIRA mensagem OU ap√≥s 12+ horas sem contato)
- **Primeira mensagem:** "Ol√°, {{nome}}! Aqui √© a Eliane, da Evex Im√≥veis. Vi que voc√™ se interessou pelo an√∫ncio do {{empreendimento}}."  
- **Sem nome:** "Ol√°! Tudo bem? Aqui √© a Eliane, da Evex Im√≥veis. Vi que voc√™ se interessou pelo an√∫ncio do {{empreendimento}}."
- **Reapresenta√ß√£o (12h+):** "Oi{{, {{nome}}}}! Aqui √© a Eliane novamente, da Evex Im√≥veis. Como posso ajudar voc√™ hoje?"

2. **Se o lead J√Å demonstrou interesse** ‚Üí FORNE√áA informa√ß√µes IMEDIATAMENTE:
   - "Perfeito! Nossos empreendimentos t√™m apartamentos de 2 e 3 quartos, a partir de R$ 300 mil."
   - "√ìtimo! Trabalhamos com financiamento facilitado e entrada parcelada."
   - **NUNCA** diga "vou enviar" ou "te mando depois" - SEMPRE d√™ informa√ß√µes na hora
   
3. **Se o lead ainda N√ÉO demonstrou interesse** ‚Üí [interest]  
   - "Voc√™ gostaria de receber mais informa√ß√µes sobre ele?"

4. **Informa√ß√µes REAIS que PODE fornecer imediatamente:**

**EMPREENDIMENTOS POR CIDADE:**

**CURITIBA:**
‚Ä¢ MORADAS DO LAGO - Condom√≠nio residencial
‚Ä¢ RESERVA GARIBALDI - Loteamento premium 
‚Ä¢ ORIGENS - Loteamento urbano
‚Ä¢ KASAVIKI - Condom√≠nio moderno

**S√ÉO JOS√â DOS PINHAIS:**
‚Ä¢ Recanto San Jos√© - Loteamento residencial
‚Ä¢ Cortona - Empreendimento imobili√°rio
‚Ä¢ Siena - Loteamento familiar  
‚Ä¢ Firenze - Condom√≠nio residencial
‚Ä¢ Quebec - Loteamento urbano
‚Ä¢ Life Garden - Condom√≠nio com √°rea verde
‚Ä¢ Vivendas do Sol - Residencial
‚Ä¢ Fazenda di Vicenza - Loteamento rural

**FAZENDA RIO GRANDE:**
‚Ä¢ Ecolife - Loteamento sustent√°vel
‚Ä¢ Recanto do Caqui - Loteamento residencial
‚Ä¢ JD Louren√ßo / JD Ang√©lica - Conjunto residencial
‚Ä¢ V√¥ Adahir - Loteamento familiar
‚Ä¢ Marina Di Veneto - Condom√≠nio premium
‚Ä¢ Jardim Veneza - Loteamento residencial

**ALMIRANTE TAMANDAR√â:**
‚Ä¢ ECOVILLE - Loteamento ecol√≥gico
‚Ä¢ JARDIM VENEZA - Loteamento residencial
‚Ä¢ BELA VISTA - Loteamento urbano
‚Ä¢ JARDIM MAZZA - Condom√≠nio residencial

**CAMPO LARGO:**
‚Ä¢ CAMPO BELO - Loteamento rural
‚Ä¢ RESIDENCIAL FEDALTO - Condom√≠nio
‚Ä¢ FLORESTA DO LAGO - Loteamento premium
‚Ä¢ SANTA HELENA - Residencial

**CAMPINA GRANDE DO SUL:**
‚Ä¢ MORADAS DA CAMPINA - Loteamento residencial
‚Ä¢ RES FELLINI - Residencial moderno

**ARAUC√ÅRIA:**
‚Ä¢ VISTA ALEGRE - Loteamento residencial

**PIRAQUARA:**
‚Ä¢ Morada do Bosque - Loteamento ecol√≥gico
‚Ä¢ Fazenda di Trento - Loteamento rural

**INFORMA√á√ïES COMERCIAIS:**
‚Ä¢ Comiss√£o: 4% sobre valor √† vista
‚Ä¢ Formas de pagamento: √Ä vista e financiamento
‚Ä¢ Entrada facilitada e parcelada
‚Ä¢ Financiamento banc√°rio dispon√≠vel
‚Ä¢ FGTS aceito como entrada
‚Ä¢ Libera√ß√£o ap√≥s entrada + documenta√ß√£o assinada

**√ÅREA DE ATUA√á√ÉO:**
Regi√£o Metropolitana de Curitiba e cidades vizinhas

**CONTATOS EVEX:**
‚Ä¢ Site: www.eveximoveis.com.br
‚Ä¢ Instagram: @eveximoveisoficial  
‚Ä¢ Facebook: /eveximoveis

5. **Finalidade do im√≥vel** ‚Üí [purpose] (se ainda n√£o souber)
   - "Me conta, voc√™ pensa em comprar para morar ou investir?"

6. **Momento de compra** ‚Üí [timing] (se ainda n√£o souber)
   - "Legal! E voc√™ imagina comprar em breve, nos pr√≥ximos 6 meses, ou ainda est√° pesquisando op√ß√µes?"

7. **Faixa de valor** ‚Üí [budget] (se ainda n√£o souber)
   - "Que faixa de investimento voc√™ tem em mente?"

8. **Forma de pagamento** ‚Üí [payment] (se ainda n√£o souber)
   - "Voc√™ pensa em pagamento √† vista ou financiamento?"

**IMPORTANTE - NUNCA PROMETA "DEPOIS":**
- ERRADO: "Vou verificar e te envio"
- ERRADO: "Te mando as informa√ß√µes em breve"  
- ERRADO: "Vou consultar e retorno"
- CORRETO: "Na Reserva Garibaldi temos lotes a partir de R$ 180 mil"
- CORRETO: "Nossos empreendimentos ficam em Curitiba e regi√£o metropolitana"
- CORRETO: "Trabalhamos com entrada facilitada e financiamento banc√°rio"
- CORRETO: "O Moradas do Lago √© um condom√≠nio residencial"
- CORRETO: "Em S√£o Jos√© temos o Life Garden, Cortona e Siena dispon√≠veis"
- CORRETO: "Para investimento, recomendo o Ecolife em Fazenda Rio Grande"

**NUNCA INVENTE DETALHES:**
- ERRADO: "O Jardim Veneza tem √≥tima estrutura"
- ERRADO: "√â um condom√≠nio fechado com seguran√ßa"
- ERRADO: "Tem √°rea de lazer completa"
- CORRETO: "O Jardim Veneza √© um loteamento residencial em Almirante Tamandar√©"
- CORRETO: "Esse empreendimento tem potencial interessante! Me conta, voc√™ busca para morar ou investir?"
- CORRETO: "Temos o Jardim Veneza dispon√≠vel. Qual seria sua faixa de investimento?"

**CONTEXTO √â TUDO:**
- LEIA todas as mensagens anteriores antes de responder
- N√ÉO repita perguntas j√° respondidas
- USE informa√ß√µes j√° fornecidas pelo lead
- AVANCE no fluxo baseado no que j√° sabe
- Seja ASSERTIVA quando o interesse j√° foi demonstrado

# 4. Exemplos de Resposta Contextual

**ERRADO (ignora contexto):**
Lead: "quero informa√ß√µes sobre investimento!"
Bot: "Voc√™ gostaria de receber mais informa√ß√µes?"

**CORRETO (usa contexto + info real):**
Lead: "quero informa√ß√µes sobre investimento!"
Bot: "Perfeito! Para investimento recomendo o Ecolife em Fazenda Rio Grande ou a Reserva Garibaldi em Curitiba. Ambos t√™m √≥timo potencial de valoriza√ß√£o."

# 5. Regras de Nome
- Usar {{nome}} do an√∫ncio na primeira mensagem, se dispon√≠vel.
- Se o lead se apresentar com outro nome, atualizar e usar esse.
- Nunca usar o nome autom√°tico do WhatsApp.
- Se n√£o houver nome, usar abertura neutra.

# 6. Crit√©rios de Qualifica√ß√£o
Lead √© qualificado se:
- Demonstra interesse real no empreendimento, ou
- Pede informa√ß√µes sobre condi√ß√µes de pagamento, ou
- Responde positivamente √†s etapas 1, 3 e 4, ou
- Fornece informa√ß√µes detalhadas sobre or√ßamento e timing.

# 7. Restri√ß√µes RIGOROSAS
- ‚úÖ Pode informar: APENAS o que est√° listado na se√ß√£o 4 (lista de empreendimentos e informa√ß√µes comerciais b√°sicas)
- ‚úÖ Pode dizer: localiza√ß√£o b√°sica (cidade), tipo geral (loteamento/condom√≠nio conforme listado)
- ‚ùå N√ÉO pode: inventar detalhes sobre estrutura, caracter√≠sticas espec√≠ficas, amenidades
- ‚ùå N√ÉO pode: descrever "√≥tima estrutura", "√°rea de lazer", "seguran√ßa" sem estar na lista
- ‚ùå N√ÉO pode: negociar pre√ßo/prazo, falar sobre obras, reputa√ß√£o da empresa
- ‚ùå N√ÉO pode: criar descri√ß√µes detalhadas n√£o fornecidas no prompt

üö® SE N√ÉO SOUBER DETALHES ESPEC√çFICOS: Use abordagem consultiva e desperte interesse:
- "Esse empreendimento tem potencial interessante! Me conta, voc√™ busca para morar ou investir?"
- "√ìtima escolha de localiza√ß√£o! Qual seria sua faixa de investimento?"
- "Esse √© bem procurado no mercado! Voc√™ tem interesse em financiar ou √† vista?"
- "Excelente oportunidade! Para morada pr√≥pria ou investimento?"
- "Muito procurado por investidores! Que tipo de im√≥vel voc√™ busca?"
- "Localiza√ß√£o privilegiada! Qual seria seu or√ßamento aproximado?"
- "Temos esse dispon√≠vel! Me conta mais sobre o que voc√™ procura?"
- NUNCA apenas: "Posso verificar mais detalhes"

# 7.1. ESTRAT√âGIA CONSULTIVA
SEMPRE direcione a conversa para qualifica√ß√£o quando n√£o souber detalhes:
- Desperte interesse com frases positivas sobre o empreendimento: "tem potencial interessante", "√≥tima escolha", "bem procurado"
- Fa√ßa perguntas sobre finalidade (morar/investir)
- Pergunte sobre or√ßamento dispon√≠vel
- Ofere√ßa op√ß√µes similares da lista
- Mantenha o lead engajado e interessado

# 7.2. FRASES PARA DESPERTAR INTERESSE
Use estas frases para tornar os empreendimentos mais atrativos:
- "Esse empreendimento tem potencial interessante!"
- "√ìtima escolha de localiza√ß√£o!"
- "Esse √© bem procurado no mercado!"
- "Excelente oportunidade para investimento!"
- "Localiza√ß√£o privilegiada!"
- "Muito procurado por investidores!"
- "Boa op√ß√£o para quem busca valoriza√ß√£o!"

# 8. Follow-up Autom√°tico
- Sem resposta ‚Üí lembrete em 30m ‚Üí depois em 2h ‚Üí se persistir, encerrar com status "N√£o Responde".
- Se recusar atendimento ‚Üí encerrar com status "N√£o Interessado".
- Perguntas fora de escopo ‚Üí responder padr√£o e registrar observa√ß√£o "D√öVIDA T√âCNICA".

# 9. Term√¥metro (C2S)
- **QUENTE** ‚Üí interesse imediato + or√ßamento definido + timing pr√≥ximo
- **MORNO** ‚Üí interesse confirmado + momento definido
- **FRIO** ‚Üí ainda pesquisando
- **INDEFINIDO** ‚Üí antes de obter respostas-chave

# 10. Formato de Sa√≠da
ATEN√á√ÉO: RETORNE APENAS O TEXTO DA MENSAGEM, N√ÉO RETORNE JSON!

Se voc√™ quiser incluir dados estruturados, use o seguinte formato JSON interno:
{
  "reply": "Mensagem curta ao lead (m√°x 180 caracteres, formal-casual, clara, emp√°tica, com quebras de texto naturais, CONTEXTUAL)",
  "c2s": {
    "observations": "=== QUALIFICA√á√ÉO IA - ELIANE ===\\nData:[ISO]\\nNome:[{{nome}}]\\nTelefone:[{{telefone}}]\\nE-mail:[{{email}}]\\nEmpreendimento:[{{empreendimento}}]\\nAn√∫ncio:[{{id_anuncio}}]\\nFaixa original:[{{faixa_valor}}]\\nFinalidade:[...]\\nMomento:[...]\\nFaixa confirmada:[...]\\nPagamento:[...]\\nObserva√ß√µes adicionais:[...]",
    "status": "Novo Lead - Qualificado por IA" | "N√£o Responde" | "N√£o Interessado"
  },
"schedule": {
  "followup": "none|30m|2h",
  "reason": "no_response|awaiting_docs|other"
}
}

IMPORTANTE: O cliente receber√° APENAS o conte√∫do do campo "reply". NUNCA envie o JSON completo.
Sempre responda de forma natural, emp√°tica e mantenha mensagens curtas (m√°x 180 caracteres cada)."""
    
    def update_prompt(self, new_prompt):
        """Atualiza o prompt do sistema"""
        self.system_prompt = new_prompt
        logger.info("Prompt atualizado")
    
    def _aplicar_variaveis_prompt(self, prompt, lead_data=None):
        """Aplica vari√°veis din√¢micas no prompt"""
        try:
            if not lead_data:
                # Valores padr√£o se n√£o tiver dados do lead
                lead_data = {
                    'nome': '',
                    'telefone': '',
                    'email': '',
                    'empreendimento': 'nosso empreendimento',
                    'faixa_valor': 'sua faixa de interesse',
                    'id_anuncio': '',
                    'timestamp': datetime.now().isoformat()
                }
            
            # Substitui vari√°veis no prompt
            prompt_personalizado = prompt
            for key, value in lead_data.items():
                prompt_personalizado = prompt_personalizado.replace(f'{{{{{key}}}}}', str(value))
            
            return prompt_personalizado
            
        except Exception as e:
            logger.error(f"Erro ao aplicar vari√°veis no prompt: {e}")
            return prompt
    
    def _quebrar_em_mensagens(self, texto):
        """Quebra texto em mensagens naturais baseado em pontos finais e perguntas"""
        # Remove espa√ßos extras
        texto = re.sub(r'\s+', ' ', texto.strip())
        
        # Quebra em senten√ßas baseado em pontos finais e perguntas
        # Mant√©m pontua√ß√£o que indica fim de frase
        sentences = re.split(r'([.!?]+\s+)', texto)
        
        mensagens = []
        mensagem_atual = ""
        
        for i in range(0, len(sentences), 2):
            sentence = sentences[i] if i < len(sentences) else ""
            punctuation = sentences[i + 1] if i + 1 < len(sentences) else ""
            
            frase_completa = sentence + punctuation
            
            # Se a mensagem atual + nova frase fica muito longa, envia a atual
            if len(mensagem_atual + frase_completa) > 200 and mensagem_atual:
                mensagens.append(mensagem_atual.strip())
                mensagem_atual = frase_completa
            else:
                mensagem_atual += frase_completa
        
        # Adiciona √∫ltima mensagem se houver
        if mensagem_atual.strip():
            mensagens.append(mensagem_atual.strip())
        
        # Se n√£o conseguiu quebrar, mant√©m original em uma mensagem
        if not mensagens:
            mensagens = [texto]
        
        logger.info(f"Texto quebrado em {len(mensagens)} mensagens")
        return mensagens
    
    def _verificar_reapresentacao(self, context):
        """Verifica se precisa se reapresentar ap√≥s 12 horas desde √∫ltima intera√ß√£o"""
        try:
            if not context or len(context) == 0:
                return False
            
            # Pega a √∫ltima mensagem do contexto
            ultima_mensagem = context[-1]
            
            # Verifica se tem timestamp
            if 'timestamp' not in ultima_mensagem:
                return False
            
            # Calcula diferen√ßa de tempo
            from datetime import datetime, timedelta
            
            # Parse do timestamp da √∫ltima mensagem
            ultimo_timestamp = datetime.fromisoformat(ultima_mensagem['timestamp'].replace('Z', '+00:00'))
            agora = datetime.now(ultimo_timestamp.tzinfo) if ultimo_timestamp.tzinfo else datetime.now()
            
            # Verifica se passou mais de 12 horas
            diferenca = agora - ultimo_timestamp
            passou_12_horas = diferenca > timedelta(hours=12)
            
            if passou_12_horas:
                logger.info(f"Passou {diferenca.total_seconds()/3600:.1f} horas desde √∫ltima intera√ß√£o - reapresenta√ß√£o necess√°ria")
            
            return passou_12_horas
            
        except Exception as e:
            logger.error(f"Erro ao verificar necessidade de reapresenta√ß√£o: {e}")
            return False
    
    def gerar_resposta(self, message, phone, context=None, lead_data=None):
        """Gera resposta da IA usando GPT-4o-mini configurado para o assistant asst_C4tLHrq74kxj8NUHEUkieU65"""
        try:
            # Verifica se √© a primeira intera√ß√£o (sem contexto ou contexto vazio)
            is_primeira_mensagem = not context or len(context) == 0
            
            # Verifica se precisa se reapresentar ap√≥s 12 horas
            precisa_reapresentar = self._verificar_reapresentacao(context)
            
            # Aplica vari√°veis din√¢micas no prompt
            prompt_personalizado = self._aplicar_variaveis_prompt(self.system_prompt, lead_data)
            
            # Se √© a primeira mensagem OU precisa se reapresentar, refor√ßa a instru√ß√£o de apresenta√ß√£o
            if is_primeira_mensagem or precisa_reapresentar:
                if precisa_reapresentar:
                    prompt_personalizado += "\n\nIMPORTANTE: J√° passou mais de 12 horas desde a √∫ltima intera√ß√£o com este lead. OBRIGATORIAMENTE se reapresente como Eliane da Evex Im√≥veis de forma calorosa, como se fosse um novo contato.\n\nATEN√á√ÉO CR√çTICA: Use APENAS as informa√ß√µes exatas da se√ß√£o 4. NUNCA invente detalhes sobre empreendimentos. Se n√£o souber algo espec√≠fico, seja CONSULTIVA: desperte interesse, fa√ßa perguntas sobre finalidade e or√ßamento."
                else:
                    prompt_personalizado += "\n\nIMPORTANTE: Esta √© a PRIMEIRA mensagem para este lead. OBRIGATORIAMENTE se apresente como Eliane da Evex Im√≥veis conforme as instru√ß√µes de apresenta√ß√£o inicial.\n\nATEN√á√ÉO CR√çTICA: Use APENAS as informa√ß√µes exatas da se√ß√£o 4. NUNCA invente detalhes sobre empreendimentos. Se n√£o souber algo espec√≠fico, seja CONSULTIVA: desperte interesse, fa√ßa perguntas sobre finalidade e or√ßamento."
            else:
                prompt_personalizado += "\n\nATEN√á√ÉO CR√çTICA: Use APENAS as informa√ß√µes exatas da se√ß√£o 4. NUNCA invente detalhes sobre empreendimentos. Se n√£o souber algo espec√≠fico, seja CONSULTIVA: desperte interesse, fa√ßa perguntas sobre finalidade e or√ßamento."

            # Payload para usar a API de chat completions com GPT-4o-mini
            messages = [
                {"role": "system", "content": prompt_personalizado},
                {"role": "user", "content": message}
            ]
            
            # Se houver contexto, adiciona mensagens anteriores
            if context:
                # Adiciona contexto antes da mensagem atual
                for ctx in context[-5:]:  # √öltimas 5 mensagens
                    role = "user" if ctx.get('sender') == 'user' else "assistant"
                    messages.insert(-1, {"role": role, "content": ctx.get('message', '')})

            data = {
                "model": "gpt-4o-mini",  # Modelo configurado para o assistant
                "messages": messages,
                "max_tokens": 300,  # Aumentado para acomodar JSON
                "temperature": 0.7
            }

            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers=self.headers,
                json=data,
                timeout=15
            )

            if response.status_code == 200:
                result = response.json()
                texto_resposta = result.get('choices', [{}])[0].get('message', {}).get('content', '').strip()
                
                if texto_resposta:
                    # VERIFICA√á√ÉO CR√çTICA: Se cont√©m JSON, extrai OBRIGATORIAMENTE
                    if '{ "reply"' in texto_resposta or '{"reply"' in texto_resposta:
                        logger.info("JSON detectado na resposta - extraindo reply...")
                        resposta_final = self._extrair_reply_do_json(texto_resposta)
                        
                        if resposta_final:
                            mensagens = self._quebrar_em_mensagens(resposta_final)
                            logger.info(f"‚úÖ JSON extra√≠do com sucesso: {resposta_final[:50]}...")
                            return mensagens
                        else:
                            # FALLBACK CR√çTICO: Tenta regex mais agressivo
                            logger.warning("Extra√ß√£o JSON falhou - tentando regex alternativo...")
                            fallback_reply = self._extrair_reply_fallback(texto_resposta)
                            if fallback_reply:
                                mensagens = self._quebrar_em_mensagens(fallback_reply)
                                logger.info(f"‚úÖ Fallback extra√≠do: {fallback_reply[:50]}...")
                                return mensagens
                            else:
                                # √öLTIMO RECURSO: Resposta padr√£o
                                logger.error("‚ùå FALHA CR√çTICA: N√£o conseguiu extrair reply do JSON!")
                                return ["Ol√°! Obrigada pela mensagem. Nossa equipe retornar√° em breve."]
                    else:
                        # Resposta j√° est√° limpa (sem JSON)
                        mensagens = self._quebrar_em_mensagens(texto_resposta)
                        logger.info(f"Resposta direta (sem JSON) quebrada em {len(mensagens)} mensagens")
                        return mensagens
                else:
                    return ["Ol√°! Obrigada pela mensagem. Nossa equipe retornar√° em breve."]
            else:
                logger.error(f"Erro OpenAI API: {response.status_code} - {response.text}")
                return ["Desculpe, ocorreu um erro. Tente novamente."]
        except Exception as e:
            logger.error(f"Erro na gera√ß√£o de resposta: {e}")
            return ["Ol√°! Obrigada pela mensagem. Nossa equipe retornar√° em breve."]
    
    def _extrair_reply_do_json(self, texto_resposta):
        """Extrai o campo 'reply' do JSON retornado pela IA"""
        try:
            import json
            
            # Remove quebras de linha e espa√ßos extras
            texto_limpo = re.sub(r'\s+', ' ', texto_resposta.strip())
            
            # Tenta encontrar JSON na resposta
            # Procura por padr√µes de JSON que come√ßam com {
            start_pos = texto_limpo.find('{ "reply"')
            if start_pos == -1:
                start_pos = texto_limpo.find('{"reply"')
            
            if start_pos != -1:
                # Encontra o final do JSON balanceando chaves
                bracket_count = 0
                end_pos = start_pos
                
                for i, char in enumerate(texto_limpo[start_pos:], start_pos):
                    if char == '{':
                        bracket_count += 1
                    elif char == '}':
                        bracket_count -= 1
                        if bracket_count == 0:
                            end_pos = i + 1
                            break
                
                json_text = texto_limpo[start_pos:end_pos]
                
                # Tenta fazer parse do JSON
                try:
                    json_obj = json.loads(json_text)
                    reply = json_obj.get('reply', '').strip()
                    
                    if reply:
                        logger.info(f"JSON extra√≠do com sucesso: {reply[:50]}...")
                        return reply
                        
                except json.JSONDecodeError as je:
                    logger.warning(f"Erro ao fazer parse do JSON: {je}")
                    
            # Se n√£o conseguiu extrair JSON, tenta extrair apenas o reply
            reply_match = re.search(r'"reply":\s*"([^"]+)"', texto_resposta)
            if reply_match:
                reply = reply_match.group(1).strip()
                logger.info(f"Reply extra√≠do via regex: {reply[:50]}...")
                return reply
            
            logger.warning("N√£o foi poss√≠vel extrair reply do JSON")
            return None
            
        except Exception as e:
            logger.error(f"Erro ao extrair reply do JSON: {e}")
            return None
    
    def _extrair_reply_fallback(self, texto_resposta):
        """Fallback mais agressivo para extrair reply quando o JSON est√° malformado"""
        try:
            import re
            
            # M√∫ltiplas tentativas de extra√ß√£o
            padroes = [
                r'"reply":\s*"([^"]+)"',  # Padr√£o b√°sico
                r'"reply"\s*:\s*"([^"]+)"',  # Com espa√ßos extras
                r'reply":\s*"([^"]+)"',  # Sem aspas inicial
                r'"reply":\s*\'([^\']+)\'',  # Com aspas simples
                r'"reply":\s*"([^"]*)"',  # Aceita string vazia
            ]
            
            for padrao in padroes:
                match = re.search(padrao, texto_resposta, re.IGNORECASE)
                if match:
                    reply = match.group(1).strip()
                    if reply:
                        logger.info(f"Fallback extra√≠do via regex: {reply[:50]}...")
                        return reply
            
            # Se ainda n√£o conseguiu, tenta extrair texto antes do primeiro "c2s"
            if '"c2s"' in texto_resposta:
                antes_c2s = texto_resposta.split('"c2s"')[0]
                # Procura por texto entre aspas no in√≠cio
                match = re.search(r'"([^"]{10,})"', antes_c2s)
                if match:
                    possivel_reply = match.group(1).strip()
                    if not possivel_reply.startswith('{') and len(possivel_reply) > 5:
                        logger.info(f"Fallback extra√≠do antes de c2s: {possivel_reply[:50]}...")
                        return possivel_reply
            
            logger.warning("Todos os fallbacks falharam")
            return None
            
        except Exception as e:
            logger.error(f"Erro no fallback de extra√ß√£o: {e}")
            return None